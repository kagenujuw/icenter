import { openBlock as p, createElementBlock as m, withModifiers as h, createVNode as r, unref as c, resolveComponent as v, createElementVNode as C, withCtx as d, createTextVNode as u, toDisplayString as w, Fragment as A, renderList as T, createBlock as I, resolveDynamicComponent as O } from "vue";
import { ElInput as V, ElRow as j, ElButton as f } from "element-plus";
const k = (e, s) => {
  const l = e.__vccOpts || e;
  for (const [i, n] of s)
    l[i] = n;
  return l;
}, B = ["id"], L = {
  __name: "input",
  props: {
    material: {
      type: Object,
      default() {
        return {};
      }
    }
  },
  emits: ["openPanel"],
  setup(e, { emit: s }) {
    const l = s, i = (n) => {
      l("openPanel", n);
    };
    return (n, t) => (p(), m("div", {
      class: "cp-item",
      id: e.material.id,
      onClick: t[1] || (t[1] = h((o) => i(e.material), ["stop"]))
    }, [
      r(c(V), {
        modelValue: e.material.props.text,
        "onUpdate:modelValue": t[0] || (t[0] = (o) => e.material.props.text = o),
        placeholder: e.material.attrs.placeholder
      }, null, 8, ["modelValue", "placeholder"])
    ], 8, B));
  }
}, E = /* @__PURE__ */ k(L, [["__scopeId", "data-v-d85fce1b"]]), g = () => ({
  id: "",
  text: "单行文本",
  componentType: "input",
  tag: "input",
  componentAlias: "honplatInput",
  attrs: {
    placeholder: "请输入",
    style: { width: "100%" },
    clearable: !0,
    maxlength: null,
    readonly: !1,
    disabled: !1,
    "show-word-limit": !1,
    "suffix-icon": "",
    "prefix-icon": ""
  },
  props: {
    text: "",
    label: "单行文本",
    labelWidth: null,
    showLabel: !0,
    changeTag: !0
  },
  __slot__: {
    prepend: "",
    append: ""
  },
  children: []
}), W = {
  honComponent: E,
  schema: g,
  type: g().componentAlias
}, S = ["id"], D = {
  __name: "input",
  props: {
    material: {
      type: Object,
      default() {
        return {};
      }
    }
  },
  emits: ["openPanel"],
  setup(e, { emit: s }) {
    const l = s, i = (n) => {
      l("openPanel", n);
    };
    return (n, t) => {
      const o = v("el-input");
      return p(), m("div", {
        id: e.material.id,
        onClick: t[1] || (t[1] = h((a) => i(e.material), ["stop"]))
      }, [
        r(o, {
          modelValue: e.material.props.text,
          "onUpdate:modelValue": t[0] || (t[0] = (a) => e.material.props.text = a),
          autosize: { minRows: 2, maxRows: 4 },
          type: "textarea",
          placeholder: e.material.attrs.placeholder
        }, null, 8, ["modelValue", "placeholder"])
      ], 8, S);
    };
  }
}, x = () => ({
  id: "",
  text: "多行文本",
  componentType: "textarea",
  tag: "textarea",
  componentAlias: "honplatTextarea",
  attrs: {
    placeholder: "请输入",
    style: { width: "100%" },
    clearable: !0,
    maxlength: null,
    readonly: !1,
    disabled: !1,
    "show-word-limit": !1,
    "suffix-icon": "",
    "prefix-icon": ""
  },
  props: {
    text: "",
    label: "多行文本",
    labelWidth: null,
    showLabel: !0,
    changeTag: !0
  },
  __slot__: {
    prepend: "",
    append: ""
  },
  children: []
}), N = {
  honComponent: D,
  schema: x,
  type: x().componentAlias
}, ae = [
  W,
  N
], b = () => ({
  id: "",
  text: "下拉框",
  componentType: "select",
  tag: "el-select",
  componentAlias: "honplatSelect",
  attrs: {
    placeholder: "请选择",
    style: { width: "100%" },
    clearable: !0,
    disabled: !1,
    filterable: !1,
    multiple: !1
  },
  __slot__: {
    options: [{
      label: "选项一",
      value: 1
    }, {
      label: "选项二",
      value: 2
    }]
  },
  props: {
    label: "下拉选择",
    showLabel: !0,
    labelWidth: null,
    tag: "el-select",
    tagIcon: "select",
    layout: "colFormItem",
    span: 24,
    required: !0,
    regList: [],
    changeTag: !0
  },
  children: []
}), R = ["id"], F = {
  __name: "select",
  props: {
    material: {
      type: Object,
      default() {
        return {};
      }
    }
  },
  emits: ["openPanel"],
  setup(e, { emit: s }) {
    const l = e, i = s, n = (t) => {
      i("openPanel", t);
    };
    return (t, o) => (p(), m("div", {
      id: l.material.id,
      onClick: o[0] || (o[0] = h((a) => n(e.material), ["stop"]))
    }, " 我是下拉选择组件 ", 8, R));
  }
}, U = {
  honComponent: F,
  schema: b,
  type: b().componentAlias
}, _ = () => ({
  id: "",
  text: "进度条",
  componentType: "progress",
  componentAlias: "honplatProgress",
  attrs: {},
  props: {
    type: "circle",
    percentage: "25"
  },
  children: []
}), q = ["id"], z = { class: "demo-progress" }, M = {
  __name: "progress",
  props: {
    material: {
      type: Object,
      default() {
        return {};
      }
    }
  },
  emits: ["openPanel"],
  setup(e, { emit: s }) {
    const l = e, i = s, n = (t) => {
      i("openPanel", t);
    };
    return (t, o) => {
      const a = v("el-progress");
      return p(), m("div", {
        id: l.material.id,
        onClick: o[0] || (o[0] = h((y) => n(e.material), ["stop"]))
      }, [
        C("div", z, [
          r(a, {
            "text-inside": !0,
            "stroke-width": 15,
            percentage: e.material.props.percentage
          }, null, 8, ["percentage"]),
          r(a, {
            type: e.material.props.type,
            percentage: e.material.props.percentage
          }, null, 8, ["type", "percentage"]),
          r(a, {
            type: e.material.props.type,
            percentage: e.material.props.percentage,
            status: "success"
          }, null, 8, ["type", "percentage"]),
          r(a, {
            type: e.material.props.type,
            percentage: e.material.props.percentage,
            status: "warning"
          }, null, 8, ["type", "percentage"]),
          r(a, {
            type: e.material.props.type,
            percentage: 50,
            status: "exception"
          }, null, 8, ["type"])
        ])
      ], 8, q);
    };
  }
}, G = {
  honComponent: M,
  schema: _,
  type: _().componentAlias
}, le = [
  U,
  G
], H = ["id"], J = {
  __name: "button",
  props: {
    material: {
      type: Object,
      default() {
        return {};
      }
    }
  },
  emits: ["openPanel"],
  setup(e, { emit: s }) {
    const l = s, i = (n) => {
      l("openPanel", n);
    };
    return (n, t) => (p(), m("div", {
      id: e.material.id,
      onClick: t[0] || (t[0] = h((o) => i(e.material), ["stop"]))
    }, [
      r(c(j), { class: "mb-4" }, {
        default: d(() => [
          r(c(f), null, {
            default: d(() => [
              u(w(e.material.props.text), 1)
            ]),
            _: 1
          }),
          r(c(f), { type: "primary" }, {
            default: d(() => [
              u("Primary")
            ]),
            _: 1
          }),
          r(c(f), { type: "success" }, {
            default: d(() => [
              u("Success")
            ]),
            _: 1
          }),
          r(c(f), { type: "info" }, {
            default: d(() => [
              u("Info")
            ]),
            _: 1
          }),
          r(c(f), { type: "warning" }, {
            default: d(() => [
              u("Warning")
            ]),
            _: 1
          }),
          r(c(f), { type: "danger" }, {
            default: d(() => [
              u("Danger")
            ]),
            _: 1
          })
        ]),
        _: 1
      })
    ], 8, H));
  }
}, $ = () => ({
  id: "",
  text: "按钮",
  componentType: "button",
  tag: "button",
  componentAlias: "honplatButton",
  attrs: {
    placeholder: "请输入",
    style: { width: "100%" },
    clearable: !0,
    maxlength: null,
    readonly: !1,
    disabled: !1,
    "show-word-limit": !1,
    "suffix-icon": "",
    "prefix-icon": ""
  },
  props: {
    text: "测试按钮",
    label: "默认按钮",
    labelWidth: null,
    showLabel: !0
  },
  __slot__: {
    prepend: "",
    append: ""
  },
  children: []
}), K = {
  honComponent: J,
  schema: $,
  type: $().componentAlias
}, P = () => ({
  id: "",
  text: "容器",
  componentType: "container",
  componentAlias: "honplatContainer",
  attrs: {},
  props: {
    text: "我是容器"
  },
  children: []
}), Q = ["id"], X = {
  __name: "container",
  props: {
    material: {
      type: Object,
      default() {
        return {};
      }
    }
  },
  emits: ["editProps", "openPanel"],
  setup(e, { emit: s }) {
    const l = s, i = e, n = (t) => {
      l("openPanel", t);
    };
    return (t, o) => (p(), m("div", {
      class: "container",
      id: i.material.id,
      onClick: o[0] || (o[0] = h((a) => n(e.material), ["stop"]))
    }, [
      C("p", null, w(e.material.props.text), 1),
      (p(!0), m(A, null, T(e.material.children, (a, y) => (p(), m("div", {
        class: "hon-item",
        key: y
      }, [
        (p(), I(O(a[a.id]), {
          material: a,
          onOpenPanel: (ee) => n(a)
        }, null, 40, ["material", "onOpenPanel"]))
      ]))), 128))
    ], 8, Q));
  }
}, Y = /* @__PURE__ */ k(X, [["__scopeId", "data-v-0aa2edf2"]]), Z = {
  honComponent: Y,
  schema: P,
  type: P().componentAlias
}, oe = [
  K,
  Z
];
export {
  ae as inputComponents,
  oe as layoutComponents,
  le as selectComponents
};
