{"version":3,"file":"nf-tool.es.js","sources":["../lib/main.js"],"sourcesContent":["  /**\r\n   * 用 call 的方式获取类型\r\n   * @param {*} val 要验证的实例\r\n   * @returns\r\n   * *   '[object Object]',\r\n   * *   '[object Array]',\r\n   * *   '[object Map]',\r\n   * *   '[object Set]',\r\n   * *   '[object Function]',\r\n   * *   '[object AsyncFunction]',\r\n   * *   '[object Promise]',\r\n   * *   '[object Symbol]',\r\n   * *   '[object String]',\r\n   * *   '[object Number]',\r\n   * *   '[object BigInt]',\r\n   * *   '[object RegExp]',\r\n   * *   '[object Date]',\r\n   * *   '[object Math]',\r\n   * *   '[object Null]',\r\n   * *   '[object Undefined]'\r\n   * *   其他\r\n   */\r\n  const toTypeString = (val) => { \r\n    return Object.prototype.toString.call(val)\r\n  }\r\n  \r\n  /**\r\n   * 获取具体类型\r\n   * @param {*} val 要验证的实例\r\n   * @returns \r\n   * *   'function',\r\n   * *   'async',\r\n   * *   'object',\r\n   * *   'array',\r\n   * *   'string',\r\n   * *   'number',\r\n   * *   'bigInt',\r\n   * *   'regExp',\r\n   * *   'date',\r\n   * *   'map',\r\n   * *   'set',\r\n   * *   'promise',\r\n   * *   'symbol',\r\n   * *   'math',\r\n   * *   'null',\r\n   * *   'undefined'\r\n   * *   其他\r\n   */\r\n  const typeName = (val) => {\r\n    return Object.prototype.toString.call(val).replace(/^\\[object (\\S+)\\]$/,'$1').toLowerCase()\r\n  }\r\n\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n  const hasOwn = (val, key) => hasOwnProperty.call(val, key)\r\n\r\n  /**\r\n   *  验证普通函数\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n  const isFunction = (val) => toTypeString(val) === '[object Function]'\r\n\r\n  /**\r\n   * 验证 async 的函数\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n  const isAsync = (val) => toTypeString(val) === '[object AsyncFunction]'\r\n \r\n  /**\r\n   * 验证 Object，不含 null\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n  const isObject = (val) => val !== null && typeof val === 'object'\r\n \r\n  /**\r\n   *  验证数组\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n   const isArray = Array.isArray\r\n \r\n   /**\r\n   * 验证字符串\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n  const isString = (val) => typeof val === 'string'\r\n \r\n  /**\r\n   * 验证 number\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n \r\n  const isNumber = (val) => typeof val === 'number'\r\n \r\n  /**\r\n   * 验证 BigInt\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n  const isBigInt = (val) => typeof val === 'bigint'\r\n \r\n  /**\r\n   * 验证 boolean\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n   const isBoolean = (val) => typeof val === 'boolean'\r\n \r\n   /**\r\n   * 验证正则类型\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n  const isRegExp = (val) => toTypeString(val) === '[object RegExp]'\r\n  /**\r\n   * 验证日期\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n  const isDate = (val) => val instanceof Date\r\n\r\n  /**\r\n   * 验证 map\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n  const isMap = (val) => toTypeString(val) === '[object Map]'\r\n  /**\r\n   * 验证 set\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n  const isSet = (val) => toTypeString(val) === '[object Set]'\r\n  /**\r\n   *  验证 Promise\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n  const isPromise = (val) => toTypeString(val) === '[object Promise]'\r\n  /**\r\n   * 验证 Symbol\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n  const isSymbol = (val) => typeof val === 'symbol'\r\n\r\n  /**\r\n   * null 或者 undefined 返回 true\r\n   * @param {*} val 要验证的对象\r\n   * @returns \r\n   */\r\n  const isNullOrUndefined = (val) => {\r\n    if (val === null) return true\r\n    if (typeof val === 'undefined') return true\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * 封装一下 console.log，window.__showlog 有值时才打印\r\n   * @param {*} msg 要显示的信息\r\n   */  \r\n  function log(){\r\n    if (window.__showlog) console.log(...arguments)\r\n  }\r\n\r\n  /**\r\n   * 封装一下 console.time、end，window.__showlog 有值时才打印\r\n   * @param {*} msg 要显示的信息\r\n   * @returns \r\n   */\r\n  const logTime = (msg, auto = true) => {\r\n    const start = () => {\r\n      if (window.__showlog) console.time(msg)\r\n    }\r\n\r\n    const end = () => {\r\n      if (window.__showlog) console.timeEnd(msg)\r\n    }\r\n\r\n    if (auto) start() // 自动开始计时\r\n    return { start, end }\r\n  }\r\n\r\nexport {\r\n  log, // 打印调试信息\r\n  logTime, // 计时\r\n  toTypeString, // Object.prototype.toString.call(val)\r\n  typeName, // 获取可以识别的名称\r\n\r\n  hasOwnProperty,\r\n  hasOwn,\r\n\r\n  isFunction, // 验证普通函数\r\n  isAsync, // 验证 async 的函数\r\n  isPromise, // 验证 Promise\r\n  isObject, // 验证 Object\r\n  isArray, // 验证数组\r\n  isString, // 验证字符串\r\n  isNumber, // 验证 number\r\n  isBigInt, // 验证 BigInt\r\n  isBoolean, // 验证 布尔\r\n  isRegExp, // 验证正则类型\r\n  isDate, // 验证日期\r\n  isMap, // 验证 map\r\n  isSet, // 验证 set\r\n  isSymbol, // 验证 Symbol\r\n \r\n  isNullOrUndefined // null 或者 undefined 返回 true\r\n}\r\n"],"names":[],"mappings":"AAsBO,MAAC,eAAe,CAAC,QAAQ;AAC5B,SAAO,OAAO,UAAU,SAAS,KAAK;AAAA;AAyBnC,MAAC,WAAW,CAAC,QAAQ;AACxB,SAAO,OAAO,UAAU,SAAS,KAAK,KAAK,QAAQ,sBAAqB,MAAM;AAAA;AAG3E,MAAC,iBAAiB,OAAO,UAAU;AACnC,MAAC,SAAS,CAAC,KAAK,QAAQ,eAAe,KAAK,KAAK;AAOjD,MAAC,aAAa,CAAC,QAAQ,aAAa,SAAS;AAO7C,MAAC,UAAU,CAAC,QAAQ,aAAa,SAAS;AAO1C,MAAC,WAAW,CAAC,QAAQ,QAAQ,QAAQ,OAAO,QAAQ;AAOnD,MAAC,UAAU,MAAM;AAOlB,MAAC,WAAW,CAAC,QAAQ,OAAO,QAAQ;AAQpC,MAAC,WAAW,CAAC,QAAQ,OAAO,QAAQ;AAOpC,MAAC,WAAW,CAAC,QAAQ,OAAO,QAAQ;AAOnC,MAAC,YAAY,CAAC,QAAQ,OAAO,QAAQ;AAOtC,MAAC,WAAW,CAAC,QAAQ,aAAa,SAAS;AAM3C,MAAC,SAAS,CAAC,QAAQ,eAAe;AAOlC,MAAC,QAAQ,CAAC,QAAQ,aAAa,SAAS;AAMxC,MAAC,QAAQ,CAAC,QAAQ,aAAa,SAAS;AAMxC,MAAC,YAAY,CAAC,QAAQ,aAAa,SAAS;AAM5C,MAAC,WAAW,CAAC,QAAQ,OAAO,QAAQ;AAOpC,MAAC,oBAAoB,CAAC,QAAQ;AACjC,MAAI,QAAQ;AAAM,WAAO;AACzB,MAAI,OAAO,QAAQ;AAAa,WAAO;AACvC,SAAO;AAAA;AAOT,eAAc;AACZ,MAAI,OAAO;AAAW,YAAQ,IAAI,GAAG;AAAA;AAQlC,MAAC,UAAU,CAAC,KAAK,OAAO,SAAS;AACpC,QAAM,QAAQ,MAAM;AAClB,QAAI,OAAO;AAAW,cAAQ,KAAK;AAAA;AAGrC,QAAM,MAAM,MAAM;AAChB,QAAI,OAAO;AAAW,cAAQ,QAAQ;AAAA;AAGxC,MAAI;AAAM;AACV,SAAO,EAAE,OAAO;AAAA;;"}